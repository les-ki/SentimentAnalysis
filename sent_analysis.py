# -*- coding: utf-8 -*-
"""sent_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ggNPfTq3KuNH9V-OvHg3YjTG5Y_IxLpZ

Instalacija biblioteka
"""

!pip install textblob
!pip install pycountry
!pip install langdetect

"""Uključivanje biblioteka"""

from textblob import TextBlob
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os
import nltk
import pycountry
import re
import string
from wordcloud import WordCloud, STOPWORDS
from PIL import Image
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from langdetect import detect
from nltk.stem import SnowballStemmer
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from sklearn.feature_extraction.text import CountVectorizer

import string
import nltk

import collections
from collections import Counter


from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

nltk.download('punkt')
nltk.download('stopwords')

"""Učitavanje skupa podataka"""

df = pd.read_excel('df_srppro.xlsx')#, sheet_name="may_2020")

df.info()

STOP_WORDS = stopwords.words()

"""Postavljanje uzoraka za simbole"""

EMOJI_PATTERN = re.compile("["
                           u"\U0001F600-\U0001F64F"  
                           u"\U0001F300-\U0001F5FF"  
                           u"\U0001F680-\U0001F6FF"  
                           u"\U0001F1E0-\U0001F1FF"  
                           u"\U00002702-\U000027B0"
                           u"\U000024C2-\U0001F251"
                           "]+", flags=re.UNICODE)

"""Brisanje duplih redaka"""

df = df.drop_duplicates()

df.info()

df.head()

"""Definiranje funkcije za čišćenje podataka"""

def cleaning(text):

    text = text.lower()
    text = re.sub(r"b\'", '', text)
    text = re.sub(r"b\"", '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    #text = re.sub('https', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('rt', '', text)
    text = re.sub('amp', '', text)
    text = re.sub('[’“”…]', '', text)
    text = re.sub(r"@[A-Za-z0-9]+", "", text) 
    text = re.sub(r"#[A-Za-z0-9]+", "", text) 
    text = re.sub(r"#", "", text) 
    text = re.sub(r"RT[\s]+", "", text) 
    text = re.sub(r"https?:\/\/\S+", "", text) 
    text = re.sub('\w*\d\w*', '', text)
  
    text = EMOJI_PATTERN.sub(r'', text)

    text_tokens = word_tokenize(text)
    tokens_without_sw = [
        word for word in text_tokens if not word in STOP_WORDS]
    filtered_sentence = (" ").join(tokens_without_sw)
    text = filtered_sentence

    return text

df['text'] = df['text'].str.encode('ascii', 'ignore').str.decode('ascii')

# august

#df1 = df[df['date'].str.contains("cor", na=False)]
#print(df1)
#print(df.loc[27431].date)
#df = df.drop(27431)

# august

#df2 = df[df['date'].str.contains("ovid", na=False)]
#print(df2)
#df = df.drop(64306)
#df = df.drop(110776)
#df = df.drop(193231)

df['date'] = pd.to_datetime(df['date'])

df = df[df['date'].notna()]

"""Primjena funkcije "cleaning"
> Ispis 10 najčešće korištenih riječi


"""

if __name__ == "__main__":
    max_rows = 1000  

    df["text"] = df["text"].astype(str).apply(cleaning)
    
    wd = df["text"]
    word_count = Counter(" ".join(wd).split())
    word_count = Counter(" ".join(wd).split()).most_common(10)
    word_frequency = pd.DataFrame(word_count, columns = ['Word', 'Frequency'])
    print(word_frequency)

df.info()

"""Definicija funkcije za izračunavanje vrijednosti sentimenta"""

def get_sentiment(df, text):
    return df[text].map(lambda txt: TextBlob(txt).sentiment.polarity)

df['textblob_sentiment'] = get_sentiment(df, 'text')

df.head()

"""Definicija funkcije za dodijeljivanje tekstualne oznake sentimenta (poz, neg, neu)"""

def analysis(score):
    if score < 0:
        return "Negative"
    elif score == 0:
        return "Neutral"
    else:
        return "Positive"

df["analysis"] = df["textblob_sentiment"].apply(analysis)

df

"""Izračun ukupnog broja pojedinog sentimenta te njegovog udjela"""

series = pd.Series(df.analysis)
  
# counting occurrence of geeks
negs = series.str.count("Negative").sum()
poss = series.str.count("Positive").sum()
neus = series.str.count("Neutral").sum()  
# display
print("no of negs: ", negs)
print("no of poss: ", poss)
print("no of neus: ", neus)


tot_analysis = df['analysis'].count()
print("Total no of analysis", tot_analysis)

neg_percent = (negs/tot_analysis)*100
pos_percent = (poss/tot_analysis)*100
neu_percent = (neus/tot_analysis)*100

print("percent of negs: ", neg_percent, "%")
print("percent of poss: ", pos_percent, "%")
print("percent of neus: ",  neu_percent,"%")

"""Izračun broja riječi i znakova u svakom tweetu"""

#number of words in each line

df['words'] = [len(x.split()) for x in df['text'].tolist()]

# number of characters in a line

df['characters_nb'] = df.text.apply(len)

print(df)

"""Izračun ukupnog/prosječnog broja riječi/znakova
> Grupiranje vrijednosti prema datumu / mjesecu


"""

total_wd = df['words'].sum()
print("Total no of words", total_wd)

avg_wd = df['words'].mean()
print("Average no of words per tweet", avg_wd)

total_chr = df['characters_nb'].sum()
print("Total no of characters", total_chr)

avg_chr = df['characters_nb'].mean()
print("Average no of characters per tweet", avg_chr)

avg_sent = df['textblob_sentiment'].mean()
print("Average sentiment total", avg_sent)

df['no1']=1

sent_day = df.groupby(df.date).mean()
sd = df.groupby(df.date).sum()
print(sd)

#month column
df['month'] = pd.DatetimeIndex(df['date']).month
import calendar
df['month'] = df['month'].apply(lambda x: calendar.month_abbr[x])
month_nums = df.groupby(df.month).sum()

print("\n")
print("Values per day", sent_day)

sent_day.info()

"""Kružni grafikon, udio sentimenta"""

labels = ['Positive ['+str(round(pos_percent,2),)+'%]', 'Neutral ['+str(round(neu_percent,2))+'%]','Negative ['+str(round(neg_percent,2))+'%]']
sizes = [pos_percent, neu_percent, neg_percent]
colors = ['yellowgreen', 'blue','red']
patches, texts = plt.pie(sizes,colors=colors, startangle=90)
plt.style.use('default')
plt.legend(labels)
plt.title("Sentiment Analysis Results")
plt.axis('equal')
plt.show()

"""Oblak riječi"""

import matplotlib.pyplot as plt
from wordcloud import WordCloud

allwords = " ".join([twts for twts in df["text"]])
wordCloud = WordCloud(width = 900, height = 900, random_state = 21, max_font_size = 119).generate(allwords)
plt.figure(figsize=(20, 20), dpi=80)
plt.imshow(wordCloud, interpolation = "bilinear")
plt.axis("off")
plt.show()

"""Prosječne vrijednosti grupirane prema sentimentu"""

df['text_len'] = df['text'].astype(str).apply(len)
df['text_word_count'] = df['text'].apply(lambda x: len(str(x).split()))

text_len = round(pd.DataFrame(df.groupby("analysis").text_len.mean()),2)

print(text_len)

tl = text_len.plot()
tl.set_title("Average number of characters grouped by sentiment")
tl

no_word = round(pd.DataFrame(df.groupby("analysis").text_word_count.mean()),2)

print(no_word)

nw = no_word.plot()
nw.set_title("Average number of words grouped by sentiment")
nw

"""Prikaz kretanja sentimenta po danima"""

by_day_sentiment = df.groupby([pd.Grouper(key='date', freq='D'), 'analysis']).size().unstack('analysis')

ds=by_day_sentiment.plot()
ds.set_title("Sentiment per day")
#(df.groupby(pd.Grouper(key='date',freq='D'))).plot()

wp = sent_day.words.plot() 
sent_day.characters_nb.plot()

labels = ['words','characters']
#sizes = [pos_percent, neu_percent, neg_percent]
#colors = ['yellowgreen', 'blue','red']
#patches, texts = plt.pie(sizes,colors=colors, startangle=90)
#wp.style.use('default')
wp.legend(labels)
wp.set_title("Average number of words and character per tweet")
#wp.axis('equal')
wp#.show()

wp = sent_day.words.plot() 
#sent_day.characters_nb.plot()

#labels = ['words','characters']
#sizes = [pos_percent, neu_percent, neg_percent]
#colors = ['yellowgreen', 'blue','red']
#patches, texts = plt.pie(sizes,colors=colors, startangle=90)
#wp.style.use('default')
#wp.legend(labels)
wp.set_title("Average number of words per tweet")
#wp.axis('equal')
wp

wp = sent_day.characters_nb.plot() 
#sent_day.characters_nb.plot()

#labels = ['words','characters']
#sizes = [pos_percent, neu_percent, neg_percent]
#colors = ['yellowgreen', 'blue','red']
#patches, texts = plt.pie(sizes,colors=colors, startangle=90)
#wp.style.use('default')
#wp.legend(labels)
wp.set_title("Average number of characters per tweet")
#wp.axis('equal')
wp

"""Kreiranje tablice s jedinstvenim datumima"""

#%matplotlib inline

dates_unique = df.date.unique()
dates_unique

sd['dates'] = dates_unique
sd

"""Kreiranje tablice s jedinstvenim nazivima mjeseci (za 2. i 3. dataset)"""

#srp-pro & kol datasets

months_unique = df.month.unique()
months_unique
month_nums['months'] = months_unique
month_nums

"""Prikaz broja objavljenih tweetova po danima"""

#plt.hist(sd.no1, bins=9, histtype='stepfilled', color='steelblue')

fig, ax = plt.subplots(figsize=(16,9))
ax.barh(sd.dates, sd.no1)

ax.grid(b=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.2)

for i in ax.patches:
  plt.text(i.get_width()+0.2, i.get_y()+0.5, str(round((i.get_width()),2)),
           fontsize=10, fontweight='bold', alpha=0.2)
ax.set_title('Number of tweets per day')

plt.show()

"""Prikaz broja objavljenih tweetova po mjesecima"""

#plt.hist(sd.no1, bins=9, histtype='stepfilled', color='steelblue')

fig, ax = plt.subplots(figsize=(16,9))
ax.barh(month_nums.months, month_nums.no1)

ax.grid(b=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.2)

for i in ax.patches:
  plt.text(i.get_width()+0.2, i.get_y()+0.5, str(round((i.get_width()),2)),
           fontsize=10, fontweight='bold', alpha=0.2)
ax.set_title('Number of tweets per month')

plt.show()

"""Prikaz broja objavljenih tweetova po tjednima"""

df4 = df.loc[:, ["no1"]]
df4["week_no"] = pd.to_datetime(df["date"]).dt.week

df_weekly = (
    df4
    .groupby("week_no")
    .sum()
    .reset_index()
)

column = df_weekly["no1"]
max_value = column.max()
print(max_value)

column = df_weekly["no1"]
min_value = column.min()
print(min_value)

fig = plt.figure(figsize = (10, 5))
 
plt.plot(df_weekly.week_no, df_weekly.no1, color ='maroon')
plt.xlabel("Week")
plt.ylabel("Tweets")
plt.title("Number of tweets per week")

plt.show()

df3 = df.loc[:, ["textblob_sentiment"]]
df3["week_no"] = pd.to_datetime(df["date"]).dt.week

df_weekly = (
    df3
    .groupby("week_no")
    .mean()
    .reset_index()
)

fig = plt.figure(figsize = (10, 5))
 
plt.plot(df_weekly.week_no, df_weekly.textblob_sentiment, color ='maroon')
plt.xlabel("Week")
plt.ylabel("Sentiment")
plt.title("Tweet sentiment per week")

plt.show()

df.head()

"""Ispis 10 najčešće korištenih riječi prema sentimentu"""

wd1 = df.loc[df['analysis'] == 'Neutral']
wd1.head()

www = wd1["text"]
word_count1 = Counter(" ".join([str(i) for i in www]).split()).most_common(10)
word_frequency1 = pd.DataFrame(word_count1, columns = ['Word', 'Frequency'])
print(word_frequency1)

wd2 = df.loc[df['analysis'] == 'Positive']
wd2.head()

www2 = wd2["text"]
word_count2 = Counter(" ".join([str(i) for i in www2]).split()).most_common(10)
word_frequency2 = pd.DataFrame(word_count2, columns = ['Word', 'Frequency'])
print(word_frequency2)

wd3 = df.loc[df['analysis'] == 'Negative']
wd3.head()

www3 = wd3["text"]
word_count3 = Counter(" ".join([str(i) for i in www3]).split()).most_common(10)
word_frequency3 = pd.DataFrame(word_count3, columns = ['Word', 'Frequency'])
print(word_frequency3)
